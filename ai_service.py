"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI
"""
from openai import OpenAI
from typing import List, Dict, Any, Optional, Tuple
import json
import re
from config import config
from loguru import logger
import random

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=config.openai_api_key)


class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self):
        self.personality = config.bot_personality
        
        # –ü—Ä–æ—Å—Ç—ã–µ fallback –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ OpenAI
        self.fallback_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! ü§î",
            "–ê —á—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ? üí≠",
            "–•–æ—Ä–æ—à–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! üí¨", 
            "–°–æ–≥–ª–∞—Å–µ–Ω, —ç—Ç–æ –≤–∞–∂–Ω–æ üëç",
            "–ü–æ–Ω—è—Ç–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ üó£Ô∏è",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? üîç",
            "–î–∞, —ç—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å üìù",
            "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! ü§∑‚Äç‚ôÇÔ∏è",
            "–ú–Ω–µ —Ç–æ–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —ç—Ç–æ —É–∑–Ω–∞—Ç—å üìö",
            "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ! ü§ù"
        ]
        
        logger.info("‚úÖ AIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _get_fallback_response(self, context_messages: List[str], topic: str = None) -> Dict:
        """Fallback –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        last_message = context_messages[-1].lower() if context_messages else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if any(word in last_message for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ', '—É—Ç—Ä–æ', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä']):
            responses = ["–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üëã", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –≤—Å–µ—Ö –≤–∏–¥–µ—Ç—å! üòä", "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üåü"]
            topic = "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
            should_respond = True
        elif any(word in last_message for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ –∂–∏–∑–Ω—å', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']):
            responses = ["–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å –∫–∞–∫? üòä", "–•–æ—Ä–æ—à–æ! –†–∞–±–æ—Ç–∞—é, –ø–æ–º–æ–≥–∞—é –≤ —á–∞—Ç–µ ü§ñ", "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –°–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏ üíô"]
            topic = "—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ"
            should_respond = True
        elif any(word in last_message for word in ['—á—Ç–æ –¥–µ–ª–∞–µ—à—å', '—á–µ–º –∑–∞–Ω—è—Ç', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ']):
            responses = ["–°–ª–µ–∂—É –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏ –≤ —á–∞—Ç–µ! üëÄ", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã üîç", "–£—á–∞—Å—Ç–≤—É—é –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ üí¨"]
            topic = "–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            should_respond = True
        elif any(word in last_message for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            responses = ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä", "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! ü§ù", "–ù–µ –∑–∞ —á—Ç–æ! üíô"]
            topic = "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
            should_respond = True
        elif any(word in last_message for word in ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–∫—Ä—É—Ç–æ']):
            responses = ["–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! üòä", "–ó–¥–æ—Ä–æ–≤–æ! üëç", "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! üéâ"]
            topic = "–ø–æ–∑–∏—Ç–∏–≤"
            should_respond = True
        elif any(word in last_message for word in ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '–ø—Ä–æ–±–ª–µ–º']):
            responses = ["–°–æ—á—É–≤—Å—Ç–≤—É—é üòî", "–ù–∞–¥–µ—é—Å—å, –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è! üí™", "–î–µ—Ä–∂–∏—Ç–µ—Å—å! ü§ó"]
            topic = "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
            should_respond = True
        elif '?' in last_message:
            responses = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î", "–•–æ—Ä–æ—à–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ! üí≠", "–ê —á—Ç–æ –≤—ã —Å–∞–º–∏ –¥—É–º–∞–µ—Ç–µ? üß†"]
            topic = "–≤–æ–ø—Ä–æ—Å"
            should_respond = True
        else:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–æ 70% –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            should_respond = random.random() < 0.7
            responses = self.fallback_responses
            topic = topic or "–æ–±—â–µ–Ω–∏–µ"
        
        if should_respond:
            response = random.choice(responses)
            sentiment = 0.7  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π
        else:
            response = None
            sentiment = 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
        
        return {
            "detected_topic": topic or "–æ–±—â–µ–Ω–∏–µ",
            "sentiment": sentiment,
            "should_respond": should_respond,
            "response": response
        }

    async def analyze_context_and_generate_response(
        self, 
        context_messages: List[str], 
        chat_title: str = None
    ) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
        
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: detected_topic, sentiment, should_respond, response
        """
        try:
            logger.info(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(context_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenAI
            context_text = "\n".join([f"- {msg}" for msg in context_messages[-5:]])
            
            system_prompt = f"""
–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ "{chat_title or '–ì—Ä—É–ø–ø–∞'}".

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
3. –û—Ü–µ–Ω–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (sentiment –æ—Ç -1 –¥–æ 1)
4. –†–µ—à–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å (should_respond: true/false)
5. –ï—Å–ª–∏ –¥–∞ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–º–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –±–µ—Å–µ–¥—ã. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "detected_topic": "—Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
    "sentiment": —á–∏—Å–ª–æ_–æ—Ç_-1_–¥–æ_1,
    "should_respond": true/false,
    "response": "—Ç–≤–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ null"
}}
"""

            user_prompt = f"""
–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ:
{context_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ä–µ—à–∏, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å.
"""

            # –ü—Ä–æ–±—É–µ–º OpenAI API
            try:
                response = await client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    max_tokens=500,
                    temperature=0.7
                )
                
                content = response.choices[0].message.content.strip()
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {content[:100]}...")
                
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                try:
                    result = json.loads(content)
                    logger.info(f"üéØ AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    return result
                except json.JSONDecodeError:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    return self._get_fallback_response(context_messages)
                    
            except Exception as openai_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {openai_error}")
                
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫–≤–æ—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                if "429" in str(openai_error) or "quota" in str(openai_error).lower():
                    logger.info("üí° –ö–≤–æ—Ç–∞ OpenAI –∏—Å—á–µ—Ä–ø–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
                    return self._get_fallback_response(context_messages)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ fallback
                    logger.info("üí° OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º")
                    return self._get_fallback_response(context_messages)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return self._get_fallback_response(context_messages)
    
    def should_respond_based_on_frequency(
        self, 
        recent_messages_count: int, 
        bot_responses_count: int
    ) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        
        Args:
            recent_messages_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            bot_responses_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
        """
        if recent_messages_count == 0:
            return False
            
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π - –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
        if bot_responses_count == 0 and recent_messages_count >= config.response_frequency:
            return True
            
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1:N
        response_ratio = bot_responses_count / recent_messages_count
        target_ratio = 1.0 / config.response_frequency
        
        return response_ratio < target_ratio
    
    def extract_topic_keywords(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        words = re.findall(r'\b\w{4,}\b', text.lower())
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'—ç—Ç–æ', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '—Ç–∞–∫–æ–π', '—Ç–∞–∫–∞—è', '—Ç–∞–∫–∏–µ', '–æ—á–µ–Ω—å', '–±–æ–ª–µ–µ', '—Å–∞–º—ã–π'}
        keywords = [word for word in words if word not in stop_words]
        return keywords[:5]  # –¢–æ–ø 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_service = AIService() 
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å Telegram –±–æ—Ç–∞
"""
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from collections import defaultdict, deque
import asyncio
from loguru import logger

from models import db_manager, ChatInteraction
from ai_service import ai_service
from config import config


class MessageBuffer:
    """–ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —á–∞—Ç–∞–º"""
    
    def __init__(self, max_messages: int = 20):
        self.max_messages = max_messages
        self.chat_messages = defaultdict(lambda: deque(maxlen=max_messages))
        self.bot_response_counts = defaultdict(int)
        self.last_response_time = defaultdict(lambda: datetime.min)
    
    def add_message(self, chat_id: str, message: str, is_bot: bool = False):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
        self.chat_messages[chat_id].append({
            'text': message,
            'timestamp': datetime.now(),
            'is_bot': is_bot
        })
        
        if is_bot:
            self.bot_response_counts[chat_id] += 1
            self.last_response_time[chat_id] = datetime.now()
    
    def get_recent_messages(self, chat_id: str, limit: int = None) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
        limit = limit or config.max_context_messages
        messages = list(self.chat_messages[chat_id])[-limit:]
        return [msg['text'] for msg in messages if not msg['is_bot']]
    
    def get_participants_count(self, chat_id: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return min(len(self.chat_messages[chat_id]), 10)
    
    def should_respond_by_frequency(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ —á–∞—Å—Ç–æ—Ç–µ"""
        recent_messages = len([
            msg for msg in self.chat_messages[chat_id] 
            if not msg['is_bot'] and 
            datetime.now() - msg['timestamp'] < timedelta(minutes=10)
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª –ª–∏ –±–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ
        time_since_last_response = datetime.now() - self.last_response_time[chat_id]
        if time_since_last_response < timedelta(seconds=30):
            return False
        
        # –õ–æ–≥–∏–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        bot_responses_recent = len([
            msg for msg in self.chat_messages[chat_id] 
            if msg['is_bot'] and 
            datetime.now() - msg['timestamp'] < timedelta(minutes=10)
        ])
        
        return ai_service.should_respond_based_on_frequency(
            recent_messages, bot_responses_recent
        )


class BotService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.message_buffer = MessageBuffer()
        logger.info("‚úÖ BotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def process_message(
        self, 
        chat_id: str, 
        chat_title: str, 
        message_text: str,
        user_id: str = None,
        username: str = None
    ) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        
        Returns:
            str: –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        """
        try:
            logger.info(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}: {message_text[:50]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            self.message_buffer.add_message(chat_id, message_text, is_bot=False)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            context_messages = self.message_buffer.get_recent_messages(
                chat_id, config.max_context_messages
            )
            
            if len(context_messages) < config.min_context_messages:
                logger.info(f"‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ({len(context_messages)} < {config.min_context_messages})")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—Ç–≤–µ—Ç–æ–≤
            if not self.message_buffer.should_respond_by_frequency(chat_id):
                logger.info("üîá –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ —á–∞—Å—Ç–æ—Ç–µ")
                await self._save_interaction(
                    chat_id, chat_title, context_messages, 
                    response_generated=False
                )
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            ai_result = await ai_service.analyze_context_and_generate_response(
                context_messages, chat_title
            )
            
            logger.info(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑: {ai_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–∏–ª –ª–∏ AI –æ—Ç–≤–µ—á–∞—Ç—å
            should_respond = ai_result.get('should_respond', False)
            bot_response = ai_result.get('response')
            
            if should_respond and bot_response:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±—É—Ñ–µ—Ä
                self.message_buffer.add_message(chat_id, bot_response, is_bot=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î
                await self._save_interaction(
                    chat_id=chat_id,
                    chat_title=chat_title,
                    context_messages=context_messages,
                    detected_topic=ai_result.get('detected_topic'),
                    sentiment=ai_result.get('sentiment'),
                    bot_response=bot_response,
                    response_generated=True
                )
                
                logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: {bot_response[:50]}...")
                return bot_response
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
                await self._save_interaction(
                    chat_id=chat_id,
                    chat_title=chat_title,
                    context_messages=context_messages,
                    detected_topic=ai_result.get('detected_topic'),
                    sentiment=ai_result.get('sentiment'),
                    response_generated=False
                )
                
                logger.info("ü§ê AI —Ä–µ—à–∏–ª –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def _save_interaction(
        self,
        chat_id: str,
        chat_title: str,
        context_messages: List[str],
        detected_topic: str = None,
        sentiment: str = None,
        bot_response: str = None,
        response_generated: bool = False
    ):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            interaction_data = {
                'chat_id': chat_id,
                'chat_title': chat_title,
                'context_messages': context_messages,
                'detected_topic': detected_topic,
                'sentiment': sentiment,
                'bot_response': bot_response,
                'response_generated': response_generated,
                'participants_count': self.message_buffer.get_participants_count(chat_id)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            await asyncio.get_event_loop().run_in_executor(
                None, db_manager.save_interaction, interaction_data
            )
            
            logger.debug("üíæ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def get_chat_stats(self, chat_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç—É"""
        try:
            history = db_manager.get_chat_history(chat_id, limit=100)
            
            total_interactions = len(history)
            responses_generated = len([h for h in history if h.response_generated])
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            sentiments = [h.sentiment for h in history if h.sentiment]
            sentiment_stats = {
                'positive': sentiments.count('positive'),
                'neutral': sentiments.count('neutral'),
                'negative': sentiments.count('negative')
            }
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
            topics = [h.detected_topic for h in history if h.detected_topic]
            topic_counts = {}
            for topic in topics:
                topic_counts[topic] = topic_counts.get(topic, 0) + 1
            
            return {
                'total_interactions': total_interactions,
                'responses_generated': responses_generated,
                'response_rate': responses_generated / max(total_interactions, 1),
                'sentiment_distribution': sentiment_stats,
                'popular_topics': sorted(topic_counts.items(), key=lambda x: x[1], reverse=True)[:5]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
bot_service = BotService() 
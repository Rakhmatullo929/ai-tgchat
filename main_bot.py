#!/usr/bin/env python3
"""
SmartGroupBot - –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import asyncio
import logging
import sys
import signal
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class SmartGroupBot:
    """–£–º–Ω—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        from config import config
        from telegram.ext import Application, MessageHandler, CommandHandler, filters
        from telegram.constants import ChatType
        
        self.config = config
        self.application = None
        self.running = False
        
        logger.info("ü§ñ SmartGroupBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def handle_message(self, update, context):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            chat = update.effective_chat
            user = update.effective_user
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ChatType –∏ bot_service
            from telegram.constants import ChatType
            from bot_service import bot_service
            
            logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}' | –ß–∞—Ç: {chat.type} | ID: {chat.id}")
            
            # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞–º–∏
            if chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (—Ç–∏–ø: {chat.type})")
                return
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
            if user and user.is_bot:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
                return
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            if message.text and message.text.startswith('/'):
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –∫–æ–º–∞–Ω–¥–∞: {message.text}")
                return
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username if user else 'Unknown'}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ bot_service
            chat_id = str(chat.id)
            chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            message_text = message.text or ""
            user_id = str(user.id) if user else None
            username = user.username if user else None
            
            logger.info(f"üîÑ –í—ã–∑—ã–≤–∞–µ–º bot_service.process_message...")
            bot_response = await bot_service.process_message(
                chat_id=chat_id,
                chat_title=chat_title,
                message_text=message_text,
                user_id=user_id,
                username=username
            )
            
            if bot_response:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {bot_response[:100]}...")
                await message.reply_text(bot_response)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                logger.info(f"ü§ê –ë–æ—Ç —Ä–µ—à–∏–ª –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}", exc_info=True)
    
    async def start_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start")
        welcome_text = """
ü§ñ SmartGroupBot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–Ø —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
‚Ä¢ üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤

–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø–µ, –∏ —è –±—É–¥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
ü§ñ SmartGroupBot - –°–ø—Ä–∞–≤–∫–∞

üîß –ö–æ–º–∞–Ω–¥—ã:
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ú–∏–Ω–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {min_context}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤: —Ä–∞–∑ –≤ {frequency} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {max_context} —Å–æ–æ–±—â–µ–Ω–∏–π

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:5001

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–µ—Å–µ–¥–µ.
        """.format(
            min_context=self.config.min_context_messages,
            frequency=self.config.response_frequency,
            max_context=self.config.max_context_messages
        )
        await update.message.reply_text(help_text)
    
    async def stats_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
        try:
            from database import SessionLocal
            from models import ChatInteraction
            from sqlalchemy import func
            
            chat_id = str(update.effective_chat.id)
            
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                total_messages = db.query(ChatInteraction).filter(
                    ChatInteraction.chat_id == chat_id
                ).count()
                
                responses_given = db.query(ChatInteraction).filter(
                    ChatInteraction.chat_id == chat_id,
                    ChatInteraction.response_generated == True
                ).count()
                
                avg_sentiment = db.query(func.avg(ChatInteraction.sentiment)).filter(
                    ChatInteraction.chat_id == chat_id,
                    ChatInteraction.sentiment.isnot(None)
                ).scalar()
                
                response_rate = (responses_given / total_messages * 100) if total_messages > 0 else 0
                
                stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ "{update.effective_chat.title}":

üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞: {responses_given}
üìâ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤: {response_rate:.1f}%
üòä –°—Ä–µ–¥–Ω–∏–π sentiment: {avg_sentiment:.2f if avg_sentiment else '–Ω/–¥'}

üåê –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: http://localhost:5001
                """
                
                await update.message.reply_text(stats_text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ === –ó–ê–ü–£–°–ö SMARTGROUPBOT ===")
            logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            logger.info(f"   ‚Ä¢ –ò–º—è: {self.config.bot_name}")
            logger.info(f"   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤: —Ä–∞–∑ –≤ {self.config.response_frequency} —Å–æ–æ–±—â–µ–Ω–∏–π")
            logger.info(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {self.config.min_context_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            from telegram.ext import Application, MessageHandler, CommandHandler, filters
            self.application = Application.builder().token(self.config.telegram_bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(
                MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
            )
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.application.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤!")
            logger.info(f"üìñ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö: {bot_info.can_read_all_group_messages}")
            logger.info(f"üë• –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: {bot_info.can_join_groups}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                allowed_updates=["message"],
                drop_pending_updates=True
            )
            
            self.running = True
            logger.info("ü§ñ === SMARTGROUPBOT –ê–ö–¢–ò–í–ï–ù ===")
            logger.info("üí¨ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            logger.info("üåê Dashboard: http://localhost:5001")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ SmartGroupBot...")
        self.running = False
        
        if self.application:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
        logger.info("‚úÖ SmartGroupBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SmartGroupBot()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        asyncio.create_task(bot.stop())
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üëã SmartGroupBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await bot.stop()

if __name__ == "__main__":
    asyncio.run(main()) 